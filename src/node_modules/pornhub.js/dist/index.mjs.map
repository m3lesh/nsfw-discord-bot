{"version":3,"sources":["../src/apis/route.ts","../src/types/SearchOrdering.ts","../src/types/SearchPeriod.ts","../src/utils/constant.ts","../src/utils/string.ts","../src/apis/getMainPage.ts","../src/utils/cheerio.ts","../src/apis/login.ts","../src/apis/logout.ts","../src/apis/getToken.ts","../src/apis/autoComplete.ts","../src/core/request.ts","../src/utils/error.ts","../src/core/engine.ts","../src/apis/webmaster/categories.ts","../src/apis/webmaster/deleted.ts","../src/utils/url.ts","../src/apis/webmaster/embed.ts","../src/apis/webmaster/utils/videoTransform.ts","../src/apis/webmaster/search.ts","../src/apis/webmaster/stars.ts","../src/apis/webmaster/stars_detailed.ts","../src/apis/webmaster/tags.ts","../src/apis/webmaster/video_by_id.ts","../src/apis/webmaster/video_is_active.ts","../src/core/webmaster.ts","../src/scrapers/pages/album.ts","../src/utils/number.ts","../src/scrapers/pages/model.ts","../src/scrapers/pages/photo.ts","../src/scrapers/pages/pornstar.ts","../src/utils/time.ts","../src/scrapers/pages/video.ts","../src/scrapers/search/base.ts","../src/scrapers/search/album.ts","../src/scrapers/search/gif.ts","../src/utils/utils.ts","../src/scrapers/search/model.ts","../src/scrapers/search/pornstar.ts","../src/scrapers/search/pornstars.ts","../src/scrapers/search/video.ts","../src/index.ts"],"sourcesContent":["import urlcat from 'urlcat'\nimport { AlbumOrderingMapping, GifOrderingMapping, PornstarListOrderingMapping, PornstarOrderingMapping, PornstarPopularPeriodMapping, PornstarViewedPeriodMapping, VideoOrderingMapping } from '../types'\nimport { BASE_URL } from '../utils/constant'\nimport { dashify, searchify } from '../utils/string'\nimport type { AlbumSearchOptions, AutoCompleteOptions, GifSearchOptions, PornstarListOptions, PornstarSearchOptions, VideoSearchOptions, WebmasterSearchOptions } from '../types'\n\nexport const Route = {\n    mainPage() {\n        return BASE_URL\n    },\n    /**\n     * @url https://www.pornhub.com/front/authenticate\n     */\n    authenticate() {\n        return urlcat(BASE_URL, '/front/authenticate')\n    },\n    /**\n     * @url https://www.pornhub.com/user/logout\n     */\n    logout(token: string) {\n        return urlcat(BASE_URL, '/user/logout', { token })\n    },\n    /**\n     * @url https://www.pornhub.com/video/search_autocomplete?q=random&orientation=straight&pornstars=1&alt=0&token=xxx\n     */\n    autocomplete(keyword: string, {\n        token,\n        sexualOrientation = 'straight',\n    }: AutoCompleteOptions) {\n        return urlcat(BASE_URL, '/video/search_autocomplete', {\n            q: keyword,\n            orientation: sexualOrientation,\n            pornstars: true,\n            token,\n            alt: 0,\n        })\n    },\n\n    albumPage(id: string) {\n        return urlcat(BASE_URL, '/album/:id', { id })\n    },\n    photoPage(id: string) {\n        return urlcat(BASE_URL, '/photo/:id', { id })\n    },\n    videoPage(id: string) {\n        return urlcat(BASE_URL, '/view_video.php', { viewkey: id })\n    },\n    pornstarPage(name: string) {\n        return urlcat(BASE_URL, '/pornstar/:name', { name })\n    },\n    modelPage(name: string) {\n        return urlcat(BASE_URL, '/model/:name', { name })\n    },\n    channelPage(name: string) {\n        return urlcat(BASE_URL, '/channels/:name', { name })\n    },\n\n    /**\n     * @url https://www.pornhub.com/albums/female-straight-uncategorized?search=random\n     */\n    albumSearch(keyword: string, {\n        page = 1,\n        segments = 'female-straight-uncategorized',\n        order = 'Most Relevant',\n        verified = false,\n    }: AlbumSearchOptions) {\n        const o = AlbumOrderingMapping[order]\n        return urlcat(BASE_URL, '/albums/:segment', {\n            segment: dashify(segments),\n            search: searchify(keyword),\n            page,\n            ...(o && { o }),\n            ...(verified && { verified: '1' }),\n        })\n    },\n    /**\n     * @url https://www.pornhub.com/gifs/search?search=xxx\n     */\n    gifSearch(keyword: string, {\n        page = 1,\n        order = 'Most Relevant',\n        sexualOrientation = 'straight',\n    }: GifSearchOptions) {\n        const o = GifOrderingMapping[order]\n        const pathTemplate = sexualOrientation === 'straight'\n            ? '/gifs/search'\n            : '/:sexualOrientation/gifs/search'\n        return urlcat(BASE_URL, pathTemplate, {\n            ...(sexualOrientation !== 'straight' && { sexualOrientation }),\n            search: searchify(keyword),\n            ...(page !== 1 && { page }),\n            ...(o && { o }),\n        })\n    },\n    /**\n     * @url https://www.pornhub.com/pornstars/search?search=hot\n     */\n    pornstarSearch(keyword: string, {\n        page = 1,\n        order = 'Most Relevant',\n    }: PornstarSearchOptions) {\n        const o = PornstarOrderingMapping[order]\n        return urlcat(BASE_URL, '/pornstars/search', {\n            search: searchify(keyword),\n            ...(page !== 1 && { page }),\n            ...(o && { o }),\n        })\n    },\n    /**\n     * @url https://www.pornhub.com/video/search?search=random\n     */\n    videoSearch(keyword: string, {\n        page = 1,\n        order = 'Most Relevant',\n        hd = false,\n        production = 'all',\n        durationMin,\n        durationMax,\n        filterCategory,\n    }: VideoSearchOptions) {\n        const o = VideoOrderingMapping[order]\n        return urlcat(BASE_URL, '/video/search', {\n            search: searchify(keyword),\n            ...(page !== 1 && { page }),\n            ...(o && { o }),\n            ...(hd && { hd: '1' }),\n            ...(production !== 'all' && { p: production }),\n            ...(durationMin && { min_duration: durationMin }),\n            ...(durationMax && { max_duration: durationMax }),\n            ...(filterCategory && { filter_category: filterCategory }),\n        })\n    },\n    /**\n     * @url https://www.pornhub.com/pornstars\n     */\n    pornstarList(param: PornstarListOptions) {\n        const {\n            gay = false,\n            performerType,\n            gender,\n            ethnicity,\n            tattoos,\n            cup,\n            piercings,\n            hair,\n            breastType,\n            ageFrom = 18,\n            ageTo = 99,\n            order = 'Most Popular',\n            page = 1,\n        } = param\n        const getYesNo = (v: boolean) => v ? 'yes' : 'no'\n        const o = PornstarListOrderingMapping[order]\n        const age = `${ageFrom}-${ageTo}`\n        return urlcat(BASE_URL, gay ? '/gay/pornstars' : '/pornstars', {\n            ...(performerType && { performerType }),\n            ...(gender && { gender }),\n            ...(ethnicity && { ethnicity }),\n            ...(typeof piercings === 'boolean' && { piercings: getYesNo(piercings) }),\n            ...(age !== '18-99' && { age }),\n            ...(cup && { cup: cup.toLowerCase() }),\n            ...(breastType && { breastType }),\n            ...(hair && { hair }),\n            ...(typeof tattoos === 'boolean' && { tattoos: getYesNo(tattoos) }),\n            ...(o && { o }),\n            ...(param.order === 'Alphabetical' && { letter: (param.letter ?? 'a').toLowerCase() }),\n            ...(param.order === 'Most Popular' && param.timeRange && param.timeRange !== 'monthly' && {\n                timeRange: PornstarPopularPeriodMapping[param.timeRange],\n            }),\n            ...(param.order === 'Most Viewed' && param.timeRange && param.timeRange !== 'alltime' && {\n                timeRange: PornstarViewedPeriodMapping[param.timeRange],\n            }),\n            ...(page !== 1 && { page }),\n        })\n    },\n\n}\n\nconst WebmasterBaseUrl = urlcat(BASE_URL, '/webmasters')\n\nexport const WebmasterRoute = {\n    isVideoActive(id: string) {\n        return urlcat(WebmasterBaseUrl, '/is_video_active', { id })\n    },\n    categories() {\n        return urlcat(WebmasterBaseUrl, '/categories')\n    },\n    deletedVideos(page: number) {\n        return urlcat(WebmasterBaseUrl, '/deleted_videos', { page })\n    },\n    video_embed_code(id: string) {\n        return urlcat(WebmasterBaseUrl, '/video_embed_code', { id })\n    },\n    stars_detailed() {\n        return urlcat(WebmasterBaseUrl, '/stars_detailed')\n    },\n    stars() {\n        return urlcat(WebmasterBaseUrl, '/stars')\n    },\n    tags(letter: string) {\n        return urlcat(WebmasterBaseUrl, '/tags', { list: letter })\n    },\n    video_by_id(id: string, thumbsize: string) {\n        return urlcat(WebmasterBaseUrl, '/video_by_id', { id, thumbsize })\n    },\n    search(keyword: string, options: WebmasterSearchOptions = {}) {\n        const query = {\n            'search': keyword.split(' ').join('+'),\n            'page': options.page,\n            'period': options.period,\n            'ordering': options.ordering,\n            'thumbsize': options.thumbsize,\n            'tags[]': options.tags?.join(','),\n            'stars[]': options.stars?.join(','),\n            'category': options.category?.join(','),\n        }\n        return urlcat(WebmasterBaseUrl, '/search', query)\n    },\n}\n","export type WebmasterSearchOrdering = 'newest' | 'mostviewed' | 'rating'\n\nexport type VideoSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated' | 'Longest'\n\nexport type GifSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated'\n\nexport type AlbumSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated'\n\nexport type PornstarSearchOrdering = 'Most Relevant' | 'Most Popular' | 'Most Viewed' | 'No. of Video'\n\nexport type PornstarListOrdering = 'Most Popular' | 'Most Viewed' | 'Top Trending' | 'Most Subscribed' | 'Alphabetical' | 'No. of Videos' | 'Random'\n\nexport const VideoOrderingMapping: Record<VideoSearchOrdering, string> = {\n    'Most Relevant': '',\n    'Most Recent': 'mr',\n    'Most Viewed': 'mv',\n    'Top Rated': 'tr',\n    'Longest': 'lg',\n}\n\nexport const GifOrderingMapping: Record<GifSearchOrdering, string> = {\n    'Most Relevant': '',\n    'Most Recent': 'mr',\n    'Most Viewed': 'mv',\n    'Top Rated': 'tr',\n}\n\nexport const AlbumOrderingMapping: Record<AlbumSearchOrdering, string> = {\n    'Most Relevant': '',\n    'Most Recent': 'mr',\n    'Most Viewed': 'mv',\n    'Top Rated': 'tr',\n}\n\nexport const PornstarOrderingMapping: Record<PornstarSearchOrdering, string> = {\n    'Most Relevant': '',\n    'Most Popular': 'mp',\n    'Most Viewed': 'mv',\n    'No. of Video': 'nv',\n}\n\nexport const PornstarListOrderingMapping: Record<PornstarListOrdering, string> = {\n    'Most Popular': '',\n    'Most Viewed': 'mv',\n    'Top Trending': 't',\n    'Most Subscribed': 'ms',\n    'Alphabetical': 'a',\n    'No. of Videos': 'nv',\n    'Random': 'r',\n}\n","export type SearchPeriod = 'weekly' | 'monthly' | 'alltime'\n\nexport type PornstarSearchPopularPeriod = 'weekly' | 'monthly' | 'yearly'\n\nexport type PornstarSearchViewedPeriod = 'daily' | 'weekly' | 'monthly' | 'alltime'\n\nexport const PornstarPopularPeriodMapping: Record<PornstarSearchPopularPeriod, string> = {\n    weekly: 'w',\n    monthly: '',\n    yearly: 'a',\n}\n\nexport const PornstarViewedPeriodMapping: Record<PornstarSearchViewedPeriod, string> = {\n    daily: 't',\n    weekly: 'w',\n    monthly: 'm',\n    alltime: '',\n}\n","export const BASE_URL = 'https://www.pornhub.com'\n","/**\n * \"luna test 1\" => \"luna+test+1\"\n * \"  luna    +test+1 \" => \"luna+test+1\"\n */\nexport function searchify(keyword: string) {\n    return keyword\n        .replace(/[^a-zA-Z0-9\\s]/g, ' ')\n        .trim()\n        .split(/\\s+/)\n        .join('+')\n}\n\n/**\n * ['uncategorized', 'transgender', 'straight', 'misc', 'male', 'gay', 'female']\n * => 'female-gay-male-misc-straight-transgender-uncategorized'\n */\nexport function dashify(keywords: string | string[]) {\n    if (!Array.isArray(keywords)) return keywords.trim()\n\n    return keywords\n        .map(keyword => keyword.trim())\n        .filter(keyword => keyword.length > 0)\n        .sort((a, b) => a.localeCompare(b))\n        .join('-')\n}\n\n/**\n * \"Eva Elfie\" => \"eva-elfie\"\n * \"Luna Okko\" => \"luna-okko\"\n */\nexport function slugify(keyword: string) {\n    return keyword\n        .replace(/[^a-zA-Z0-9\\s]/g, ' ')\n        .trim()\n        .split(/\\s+/)\n        .join('-')\n}\n","import { Route } from './route'\nimport type { Engine } from '../core/engine'\n\nexport async function getMainPage(engine: Engine) {\n    const html = await engine.request.raw(Route.mainPage())\n    return html\n}\n","import * as cheerio from 'cheerio'\nimport type { Cheerio, Element } from 'cheerio'\n\nexport function getCheerio(html: string) {\n    return cheerio.load(html)\n}\n\nexport function getAttribute<T, R = T>(el: Cheerio<Element>, name: string, defaultValue: R): T | R\nexport function getAttribute<T>(el: Cheerio<Element>, name: string): T | null | undefined\nexport function getAttribute<T, R>(el: Cheerio<Element>, name: string, defaultValue?: R): T | R | null | undefined {\n    return <T>el.attr(name) ?? defaultValue\n}\n\nexport function getDataAttribute<T, R = T>(el: Cheerio<Element>, name: string, defaultValue: R): T | R\nexport function getDataAttribute<T>(el: Cheerio<Element>, name: string): T | null | undefined\nexport function getDataAttribute<T, R>(el: Cheerio<Element>, name: string, defaultValue?: R): T | R | null | undefined {\n    return <T>el.data(name) ?? defaultValue\n}\n","import { getCheerio } from '../utils/cheerio'\nimport { getMainPage } from './getMainPage'\nimport { Route } from './route'\nimport type { Engine } from '../core/engine'\n\ninterface LoginResult {\n    success: boolean\n    message: string\n    premium_redirect_cookie: string\n}\n\nexport async function login(engine: Engine, account: string, password: string) {\n    if (!account || typeof account !== 'string') throw new Error('Invalid Account')\n    if (!password || typeof password !== 'string') throw new Error('Invalid Password')\n\n    const { token, redirect } = await getToken(engine)\n    const result = await sendLoginForm(engine, account, password, token, redirect)\n\n    if (result.success) {\n        return {\n            success: true,\n            message: 'Successfully logged in.',\n            premium: result.premium_redirect_cookie === '1',\n        }\n    }\n    else {\n        return {\n            success: false,\n            message: `Login fail, Reason: ${result.message}`,\n            premium: false,\n        }\n    }\n}\n\nasync function getToken(engine: Engine) {\n    try {\n        const html = await getMainPage(engine)\n        const $ = getCheerio(html)\n        const token = $('[name=\"token\"]').attr('value') || ''\n        const redirect = $('[name=\"redirect\"]').attr('value') || ''\n        return { token, redirect }\n    }\n    catch (err) {\n        return await Promise.reject(err)\n    }\n}\n\nfunction sendLoginForm(engine: Engine, account: string, password: string, token: string, redirect: string) {\n    const data = {\n        redirect,\n        token,\n        remember_me: 1,\n        from: 'pc_login_modal_:show',\n        username: account,\n        password,\n        setSendTip: false,\n    }\n\n    return engine.request.postForm<LoginResult>(Route.authenticate(), data)\n}\n","import { getMainPage } from './getMainPage'\nimport { Route } from './route'\nimport type { Engine } from '../core/engine'\n\nexport async function logout(engine: Engine) {\n    try {\n        const mainPage = await getMainPage(engine)\n        const result = /href=\"\\/user\\/logout\\?token=([a-zA-Z0-9-_.]*?)\"/.exec(mainPage)\n        if (!result) throw new Error('Logout failed')\n\n        const token = result[1]\n        await engine.request.get(Route.logout(token))\n\n        return {\n            success: true,\n            message: 'Successfully logged out',\n        }\n    }\n    catch (err) {\n        return Promise.reject(err)\n    }\n}\n","import { getCheerio, getDataAttribute } from '../utils/cheerio'\nimport { getMainPage } from './getMainPage'\nimport type { Engine } from '../core/engine'\n\nexport async function getToken(engine: Engine) {\n    const html = await getMainPage(engine)\n    const $ = getCheerio(html)\n    const inputEl = $('form#search_form input[name=\"search\"]')\n    const token = getDataAttribute<string, null>(inputEl, 'token', null)\n    if (!token) throw new Error('Failed to get token')\n    return token\n}\n","import { getToken } from './getToken'\nimport { Route } from './route'\nimport type { Engine } from '../core/engine'\nimport type { AutoCompleteOptions } from '../types'\nimport type { AutoCompleteResponse } from '../types/AutoComplete'\n\nexport async function getAutoComplete(engine: Engine, keyword: string, options: AutoCompleteOptions) {\n    const token = options.token ?? await getToken(engine)\n    const result = await engine.request.get<AutoCompleteResponse>(Route.autocomplete(keyword, {\n        ...options,\n        token,\n    }))\n\n    return {\n        ...result,\n        models: result.models?.map(item => ({\n            ...item,\n            url: Route.modelPage(item.slug),\n        })).sort((a, b) => a.rank - b.rank) ?? [],\n        pornstars: result.pornstars?.map(item => ({\n            ...item,\n            url: Route.pornstarPage(item.slug),\n        })).sort((a, b) => a.rank - b.rank) ?? [],\n        channels: result.channels?.map(item => ({\n            ...item,\n            url: Route.channelPage(item.slug),\n        })).sort((a, b) => +a.rank - +b.rank) ?? [],\n    }\n}\n","import { URLSearchParams } from 'url'\nimport createDebug from 'debug'\nimport fetch from 'node-fetch'\nimport { getCheerio } from '../utils/cheerio'\nimport { HttpStatusError, IllegalError } from '../utils/error'\nimport type { RequestInit, Response } from 'node-fetch'\n\nconst debug = createDebug('request')\n\nexport class Request {\n    _agent: RequestInit['agent']\n    _headers: Record<string, string> = {}\n    _cookie: Map<any, any> = new Map()\n\n    setAgent(agent: RequestInit['agent']) {\n        this._agent = agent\n    }\n\n    setHeader(key: string, value: string) {\n        this._headers[key] = value\n    }\n\n    get cookie() {\n        return Array.from(this._cookie).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('; ')\n    }\n\n    setCookie(key: string, value: any) {\n        this._cookie.set(key, value)\n    }\n\n    async checkStatus(res: Response) {\n        if (res.ok) return res\n\n        if (res.status === 404) {\n            let html = ''\n            try {\n                html = await res.text()\n            }\n            catch (error) {\n                // ignore\n            }\n\n            if (/class=\"deterrenceWarn\"/.test(html)) {\n                const $ = getCheerio(html)\n                const warning = $('.deterrenceWarn').text()\n                if (warning) {\n                    return Promise.reject(new IllegalError(warning))\n                }\n            }\n        }\n        return Promise.reject(new HttpStatusError(`${res.status} ${res.statusText}`))\n    }\n\n    parseCookieItem(str: string) {\n        if (str.includes(';')) str = str.split(';')[0]\n\n        return str.split('=')\n    }\n\n    handleSetCookie(res: Response) {\n        if (!res.headers.raw()['set-cookie']) return res\n\n        res.headers.raw()['set-cookie'].forEach((item) => {\n            const [key, value] = this.parseCookieItem(item)\n            this._cookie.set(key, value)\n        })\n\n        this.setHeader('Cookie', this.cookie)\n        return res\n    }\n\n    toJson(res: Response) {\n        const contentType = res.headers.get('content-type') || ''\n        return contentType.includes('json') ? res.json() : res.text()\n    }\n\n    buildParams<U extends Record<string, any>>(data: U) {\n        const params = new URLSearchParams()\n        Object.keys(data).forEach((key) => {\n            params.append(key, data[key])\n        })\n        return params\n    }\n\n    buildRequest<U extends Record<string, any>, T>(method: 'get' | 'post' | 'post-form', url: string, data?: U): Promise<T> {\n        const opts: RequestInit = {}\n        const headers = Object.assign({}, this._headers)\n\n        if (method === 'get') opts.method = 'get'\n\n        if (method === 'post') {\n            headers['Content-Type'] = 'application/json'\n            opts.method = 'post'\n            opts.body = JSON.stringify(data)\n        }\n\n        if (method === 'post-form') {\n            // headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'\n            opts.method = 'post'\n            if (data) opts.body = this.buildParams<U>(data)\n        }\n\n        headers && (opts.headers = headers)\n        this._agent && (opts.agent = this._agent)\n\n        return fetch(url, opts)\n            .then(res => this.checkStatus(res))\n            .then(res => this.handleSetCookie(res))\n            .then(res => this.toJson(res) as T)\n            .catch(err => Promise.reject(err))\n    }\n\n    get<T>(url: string): Promise<T> {\n        debug(`GET ${url}`)\n        return this.buildRequest('get', url)\n    }\n\n    post<T, U extends object = any>(url: string, data: U): Promise<T> {\n        debug(`POST ${url}`)\n        return this.buildRequest('post', url, data)\n    }\n\n    postForm<T, U extends object = any>(url: string, data: U): Promise<T> {\n        debug(`POST ${url}`)\n        return this.buildRequest('post-form', url, data)\n    }\n\n    raw(url: string): Promise<string> {\n        debug(`GET ${url}`)\n        return this.buildRequest('get', url)\n    }\n}\n","export class HttpStatusError extends Error {}\n\nexport class IllegalError extends Error {}\n","import { BASE_URL } from '../utils/constant'\nimport { Request } from './request'\n\nexport class Engine {\n    BASE_URL = BASE_URL\n    request = new Request()\n\n    // Flag to indicate whether the engine has visited the main page to get the cookies.\n    // See issue: https://github.com/pionxzh/Pornhub.js/issues/27\n    warmedUp = false\n\n    constructor() {\n        this.request.setHeader('Host', this.BASE_URL.replace('https://', ''))\n        this.request.setHeader('Origin', this.BASE_URL)\n        this.request.setHeader('Referer', `${this.BASE_URL}/`)\n        this.request.setHeader('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36')\n\n        this.request.setCookie('platform', 'pc')\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport interface WebmasterCategory {\n    categories: Category[]\n}\n\nexport interface Category {\n    id: string\n    category: string\n}\n\nexport async function categories(engine: Engine): Promise<Category[]> {\n    try {\n        const result = await engine.request.get<WebmasterCategory>(WebmasterRoute.categories())\n        return result.categories.sort((a, b) => +a.id - +b.id)\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport interface WebmasterDeleted {\n    videos: DeletedVideo[]\n}\n\nexport interface DeletedVideo {\n    vkey: string\n    deleted_on: string\n}\n\nexport async function deleted(engine: Engine, page: number): Promise<DeletedVideo[]> {\n    try {\n        const result = await engine.request.get<WebmasterDeleted>(WebmasterRoute.deletedVideos(page))\n        return result.videos\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { slugify } from './string'\n\nexport class UrlParser {\n    static getVideoID(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/view_video\\.php\\?viewkey=([a-zA-z0-9]{1,30})/\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\n        return id\n    }\n\n    static getAlbumID(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/album\\/([0-9]{1,30})/\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\n        return id\n    }\n\n    static getPhotoID(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/photo\\/([0-9]{1,30})/\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\n        return id\n    }\n\n    static getPornstarName(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/pornstar\\/([a-zA-z0-9-]{1,30})/\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\n        return name\n    }\n\n    static getModelName(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/model\\/([a-zA-z0-9-]{1,30})/\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\n        return name\n    }\n\n    static getChannelName(url: string) {\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/channels\\/([a-zA-z0-9-]{1,30})/\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\n        return name\n    }\n}\n","import { UrlParser } from '../../utils/url'\nimport { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport type WebmasterEmbed =\n{\n    embed: {\n        code: string\n    }\n} | {\n    code: string // '2002' stands for \"No video with this ID.\"\n    message: string\n    example: string\n}\n\nexport async function video_embed_code(engine: Engine, urlOrId: string): Promise<string | null> {\n    try {\n        const id = UrlParser.getVideoID(urlOrId)\n        const result = await engine.request.get<WebmasterEmbed>(WebmasterRoute.video_embed_code(id))\n\n        if ('code' in result) throw new Error(result.message)\n\n        return result.embed.code\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&quot;/g, '\"')\n    }\n    catch (err) {\n        console.error(err)\n        return null\n    }\n}\n","import type { VideoDetail, VideoResponse } from '../../../types'\n\nexport function videoTransform(response: VideoResponse): VideoDetail {\n    const {\n        duration,\n        views,\n        video_id,\n        rating,\n        ratings,\n        title,\n        url,\n        default_thumb,\n        thumb,\n        publish_date,\n        thumbs,\n        tags,\n        pornstars,\n        categories,\n        segment,\n    } = response\n\n    // vote\n    const total = ratings\n    const up = Math.round(total * rating / 100)\n    const down = total - up\n    const vote = { up, down, total, rating: Math.round(rating * 100) / 100 }\n\n    return {\n        duration,\n        views,\n        video_id,\n        vote,\n        title,\n        url,\n        default_thumb,\n        thumb,\n        publish_date,\n        thumbs: thumbs.map(({ width, height, src }) => ({ width, height, src })),\n        tags: tags.map(x => x.tag_name),\n        pornstars: pornstars.map(x => x.pornstar_name),\n        categories: categories.map(x => x.category),\n        segment,\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport { videoTransform } from './utils/videoTransform'\nimport type { Engine } from '../../core/engine'\nimport type { VideoDetail, VideoResponse, WebmasterSearchOptions } from '../../types'\n\nexport interface WebmasterSearch {\n    videos: VideoResponse[]\n}\n\nexport async function search(engine: Engine, keyword: string, options: WebmasterSearchOptions): Promise<VideoDetail[]> {\n    try {\n        const result = await engine.request.get<WebmasterSearch>(WebmasterRoute.search(keyword, options))\n        return result.videos.map(x => videoTransform(x))\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport interface WebmasterStars {\n    stars: WebmasterStar[]\n}\n\nexport interface WebmasterStar {\n    star: {\n        star_name: string\n    }\n}\n\nexport async function stars(engine: Engine): Promise<string[]> {\n    try {\n        const result = await engine.request.get<WebmasterStars>(WebmasterRoute.stars())\n        return result.stars.map(x => x.star.star_name)\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport interface WebmasterStarsDetailed {\n    stars: Array<{ star: DetailedStar }>\n}\n\nexport interface DetailedStar {\n    star_name: string\n    star_thumb: string\n    star_url: string\n    gender: 'male' | 'female' | (string & {})\n    videos_count_all: string\n}\n\nexport async function stars_detailed(engine: Engine): Promise<DetailedStar[]> {\n    try {\n        const result = await engine.request.get<WebmasterStarsDetailed>(WebmasterRoute.stars_detailed())\n        return result.stars.map(x => x.star)\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport interface WebmasterTags {\n    tagsCount: number\n    tags: string[]\n}\n\n/**\n * Warning: We had to change the response structure due to high amount of tags. Please adjust your code\n * -- message from the official API\n *\n * I don't know what they actually changed :/\n */\nexport async function tags(engine: Engine, letter: string): Promise<string[]> {\n    try {\n        const result = await engine.request.get<WebmasterTags>(WebmasterRoute.tags(letter))\n        return result.tags\n    }\n    catch (err) {\n        console.error(err)\n        return []\n    }\n}\n","import { UrlParser } from '../../utils/url'\nimport { WebmasterRoute } from '../route'\nimport { videoTransform } from './utils/videoTransform'\nimport type { Engine } from '../../core/engine'\nimport type { ThumbSize, VideoDetail, VideoResponse } from '../../types'\n\nexport interface WebmasterVideoById {\n    video: VideoResponse\n}\n\nexport async function video_by_id(engine: Engine, urlOrId: string, thumbsize: ThumbSize = 'large'): Promise<VideoDetail> {\n    const id = UrlParser.getVideoID(urlOrId)\n    const result = await engine.request.get<WebmasterVideoById>(WebmasterRoute.video_by_id(id, thumbsize))\n    return videoTransform(result.video)\n}\n","import { UrlParser } from '../../utils/url'\nimport { WebmasterRoute } from '../route'\nimport type { Engine } from '../../core/engine'\n\nexport type WebmasterVideoIsActive =\n{\n    active: {\n        video_id: string\n        is_active: '1' | '0'\n    }\n} | {\n    code: string // '2002' stands for \"No video with this ID.\"\n    message: string\n    example: string\n}\n\nexport async function video_is_active(engine: Engine, urlOrId: string): Promise<boolean> {\n    try {\n        const id = UrlParser.getVideoID(urlOrId)\n        const result = await engine.request.get<WebmasterVideoIsActive>(WebmasterRoute.isVideoActive(id))\n\n        if ('code' in result) throw new Error(result.message)\n\n        return result.active.is_active === '1'\n    }\n    catch (err) {\n        console.error(err)\n        return false\n    }\n}\n","import { categories, deleted, search, stars, stars_detailed, tags, video_by_id, video_embed_code, video_is_active } from '../apis/webmaster'\nimport type { Engine } from './engine'\nimport type { LowerLetter, ThumbSize, WebmasterSearchOptions } from '../types'\n\nexport class WebMaster {\n    constructor(private engine: Engine) {\n    }\n\n    /**\n     * Search video by keyword\n     * @url https://www.pornhub.com/webmasters/search?search=keyword\n     * @example\n     * const results = await pornhub.webMaster.search('keyword', { page: 2, period: 'weekly' })\n    */\n    search(keyword: string, options: WebmasterSearchOptions = {}) {\n        return search(this.engine, keyword, options)\n    }\n\n    /**\n     * Get video information by url/id\n     * @url https://www.pornhub.com/webmasters/video_by_id?id={ID}&thumbsize=large\n     * @param urlOrId Video ID or page url\n     * @param thumbsize Thumbnail photo size\n     * @example\n     * const video = await pornhub.webMaster.getVideo('ph5a9634c9a827e')\n     */\n    getVideo(urlOrId: string, thumbsize?: ThumbSize) {\n        return video_by_id(this.engine, urlOrId, thumbsize)\n    }\n\n    /**\n     * Get video active status by url/id (deleted video will be false)\n     * @url https://www.pornhub.com/webmasters/is_video_active?id={ID}\n     * @param urlOrId Video ID or page url\n     * @example\n     * const isActive = await pornhub.webMaster.isVideoActive('ph5a9634c9a827e')\n    */\n    isVideoActive(urlOrId: string) {\n        return video_is_active(this.engine, urlOrId)\n    }\n\n    /**\n     * Get embed HTML code by video url/id\n     * @url https://www.pornhub.com/webmasters/video_embed_code?id=ID\n     * @param urlOrId Video ID or page url\n     * @example\n     * const code = await pornhub.webMaster.getVideoEmbedCode('ph5a9634c9a827e')\n     * // <iframe src=\"https://www.pornhub.com/embed/xxxxxx\" frameborder=\"0\" width=\"560\" height=\"340\" scrolling=\"no\" allowfullscreen></iframe>\n    */\n    getVideoEmbedCode(urlOrId: string) {\n        return video_embed_code(this.engine, urlOrId)\n    }\n\n    /**\n     * Get deleted video list by page\n     * @url https://www.pornhub.com/webmasters/deleted_videos?page=1\n     * @param page Page number, default: 1\n     * @example\n     * const deletedVideos = await pornhub.webMaster.getDeletedVideos(2)\n    */\n    getDeletedVideos(page = 1) {\n        return deleted(this.engine, page)\n    }\n\n    /**\n     * Query tag list by the first letter of tag name\n     * @url https://www.pornhub.com/webmasters/tags?list=a\n     * @param letter First letter of tag name. Default: 'a'. Range: a-z.\n     * @example\n     * const tags = await pornhub.webMaster.getTags('s')\n     * // ['solo', 'squirting', 'stockings', ...]\n    */\n    getTags(letter: LowerLetter = 'a') {\n        return tags(this.engine, letter)\n    }\n\n    /**\n     * Get category list\n     * @url https://www.pornhub.com/webmasters/categories\n     * @example\n     * const categories = await pornhub.webMaster.getCategories()\n     * // [{ id: \"65\", category: \"threesome\" }, { id: \"105\", category: \"60fps\" }]\n    */\n    getCategories() {\n        return categories(this.engine)\n    }\n\n    /**\n     * Get pornstar name list\n     * @url https://www.pornhub.com/webmasters/stars\n     * @example\n     * const pornstars = await pornhub.webMaster.getPornstars()\n    */\n    getPornstars() {\n        return stars(this.engine)\n    }\n\n    /**\n     * Get pornstar detail list\n     * @url https://www.pornhub.com/webmasters/stars_detailed\n     * const pornstars = await pornhub.webMaster.getPornstarsDetail()\n    */\n    getPornstarsDetail() {\n        return stars_detailed(this.engine)\n    }\n}\n","import { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { UrlParser } from '../../utils/url'\nimport type { Engine } from '../../core/engine'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface AlbumPage {\n    photos: Array<{\n        url: string\n        views: string\n        rating: string\n        preview: string\n    }>\n    provider: {\n        id: string\n        username: string\n        url: string\n    }\n    tags: string[]\n}\n\nexport async function albumPage(engine: Engine, urlOrId: string): Promise<AlbumPage> {\n    const id = UrlParser.getAlbumID(urlOrId)\n    const url = Route.albumPage(id)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        photos: parsePhotos($),\n        provider: parseProvider($),\n        tags: parseTag($),\n    }\n}\n\nfunction parsePhotos($: CheerioAPI) {\n    const $list = $('ul.photosAlbumsListing li.photoAlbumListContainer div.photoAlbumListBlock')\n    const photos = $list.map((_, el) => {\n        const item = $(el)\n        const url = `${BASE_URL}${item.find('a').attr('href')}` || ''\n        const views = item.find('.album-views').text().replace('Views: ', '').trim()\n        const rating = item.find('.album-rating').text()\n        const preview = getDataAttribute<string>(item, 'bkg', '')\n        return { url, views, rating, preview }\n    }).get()\n\n    return photos\n}\n\nfunction parseProvider($: CheerioAPI) {\n    const $user = $('div.pfileInfoBox div.usernameWrap')\n\n    const id = getDataAttribute<string>($user, 'userid', '')\n    const username = $user.find('a').text()\n    const url = getAttribute<string>($user.find('a'), 'href', '')\n\n    return { id, username, url }\n}\n\nfunction parseTag($: CheerioAPI) {\n    const $list = $('div.tagContainer > a')\n    return $list.map((_, el) => $(el).text().trim()).get()\n}\n","export function parseReadableNumber(viewsText: string): number {\n    if (!viewsText) return 0\n\n    const views = viewsText.replace(/,/g, '')\n    if (views.includes('K')) {\n        return parseFloat(views) * 1000\n    }\n    else if (views.includes('M')) {\n        return parseFloat(views) * 1000000\n    }\n    else if (views.includes('B')) {\n        return parseFloat(views) * 1000000000\n    }\n    else {\n        return parseFloat(views)\n    }\n}\n","import { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { parseReadableNumber } from '../../utils/number'\nimport { UrlParser } from '../../utils/url'\nimport type { Engine } from '../../core/engine'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface ModelPage {\n    name: string\n    about: string\n    bio: string\n    avatar: string\n    cover: string\n    rank: number\n    verified: boolean\n    awarded: boolean\n    premium: boolean\n    subscribers: number\n    featuredIn: Array<{ name: string; url: string }>\n\n    uploadedVideoCount: number\n    taggedVideoCount: number\n\n    gender?: string\n    born?: string\n    birthPlace?: string\n    starSign?: string\n    measurements?: string\n    endowment?: string\n    relationship?: 'Open' | 'Taken' | 'Single' | (string & {})\n    interestedIn?: string\n    cityAndCountry?: string\n    careerStatus?: string\n    careerStartAndEnd?: string\n    height?: string\n    weight?: string\n    ethnicity?: string\n    background?: string\n    hairColor?: string\n    eyeColor?: string\n    fakeBoobs?: string\n    tattoos?: string\n    piercings?: string\n    interests?: string\n    videoWatched?: number\n    turnOns?: string\n    turnOffs?: string\n    videoViews?: number\n    profileViews?: number\n\n    socials: {\n        website?: string\n        twitter?: string\n        instagram?: string\n        snapchat?: string\n        modelhub?: string\n        amazonWishList?: string\n    }\n}\n\nconst defaultMapper = (value: string) => value\nconst yesNoMapper = (value: string) => value === 'Yes'\nconst stripeSpaceMapper = (value: string) => value.split(/\\s+/).join(' ')\nconst numberMapper = (value: string) => parseReadableNumber(value)\nconst DefaultMapper = {\n    key: defaultMapper,\n    value: defaultMapper,\n}\nconst KeyMapper: Record<string, {\n    key: (key: string) => keyof ModelPage\n    value: (value: string) => string | boolean | number\n}> = {\n    'Relationship status': {\n        key: () => 'relationship',\n        value: defaultMapper,\n    },\n    'Interested in': {\n        key: () => 'interestedIn',\n        value: defaultMapper,\n    },\n    'Gender': {\n        key: () => 'gender',\n        value: defaultMapper,\n    },\n    'Height': {\n        key: () => 'height',\n        value: defaultMapper,\n    },\n    'Weight': {\n        key: () => 'weight',\n        value: defaultMapper,\n    },\n    'Ethnicity': {\n        key: () => 'ethnicity',\n        value: defaultMapper,\n    },\n    'Background': {\n        key: () => 'background',\n        value: defaultMapper,\n    },\n    'Hair Color': {\n        key: () => 'hairColor',\n        value: defaultMapper,\n    },\n    'Eye Color': {\n        key: () => 'eyeColor',\n        value: defaultMapper,\n    },\n    'Fake Boobs': {\n        key: () => 'fakeBoobs',\n        value: yesNoMapper,\n    },\n    'Tattoos': {\n        key: () => 'tattoos',\n        value: yesNoMapper,\n    },\n    'Piercings': {\n        key: () => 'piercings',\n        value: yesNoMapper,\n    },\n    'Video Views': {\n        key: () => 'videoViews',\n        value: numberMapper,\n    },\n    'Profile Views': {\n        key: () => 'profileViews',\n        value: numberMapper,\n    },\n    'Videos Watched': {\n        key: () => 'videoWatched',\n        value: numberMapper,\n    },\n    'Turn Ons': {\n        key: () => 'turnOns',\n        value: defaultMapper,\n    },\n    'Turn Offs': {\n        key: () => 'turnOffs',\n        value: defaultMapper,\n    },\n    'Interests and hobbies': {\n        key: () => 'interests',\n        value: defaultMapper,\n    },\n    'Born': {\n        key: () => 'born',\n        value: defaultMapper,\n    },\n    'Birth Place': {\n        key: () => 'birthPlace',\n        value: defaultMapper,\n    },\n    'Birthplace': {\n        key: () => 'birthPlace',\n        value: defaultMapper,\n    },\n    'Star Sign': {\n        key: () => 'starSign',\n        value: defaultMapper,\n\n    },\n    'Measurements': {\n        key: () => 'measurements',\n        value: defaultMapper,\n    },\n    'City and Country': {\n        key: () => 'cityAndCountry',\n        value: defaultMapper,\n    },\n    'Endowment': {\n        key: () => 'endowment',\n        value: defaultMapper,\n    },\n    'Career Status': {\n        key: () => 'careerStatus',\n        value: defaultMapper,\n    },\n    'Career Start and End': {\n        key: () => 'careerStartAndEnd',\n        value: stripeSpaceMapper,\n    },\n}\n\nconst parseVideoCount = (text: string) => {\n    // \"Showing 1-XX of YY\"\n    if (!text) return 0\n\n    const match = text.match(/Showing \\d+-\\d+ of (\\d+)/)\n    if (match) return parseReadableNumber(match[1])\n\n    return 0\n}\n\nexport async function modelPage(engine: Engine, urlOrName: string): Promise<ModelPage> {\n    const name = UrlParser.getModelName(urlOrName)\n    if (!name) throw new Error(`Invalid model input: ${urlOrName}`)\n\n    const url = Route.modelPage(name)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return parseInfo($)\n}\n\nfunction parseInfo($: CheerioAPI): ModelPage {\n    const infoPieces = $('div.infoPiece').toArray()\n    const info = Object.fromEntries(infoPieces.map((el) => {\n        const item = $(el)\n        const key = item.find('span:nth-child(1)').text().trim().replace(':', '')\n        const value = item.find('span:nth-child(2)').text().trim()\n            || item.text().replace(item.find('span:nth-child(1)').text(), '').trim()\n        const mapper = KeyMapper[key] || DefaultMapper\n        return [mapper.key(key), mapper.value(value)]\n    }))\n\n    const name = $('.nameSubscribe > .name').text().trim()\n\n    const rankEl = $('div.rankingInfo > .infoBox > span')\n    const rank = parseReadableNumber(rankEl.text().trim())\n\n    const avatarEl = $('img#getAvatar, .topProfileHeader > .thumbImage > img')\n    const avatar = getAttribute<string>(avatarEl, 'src', '')\n\n    const coverEl = $('img#coverPictureDefault, .topProfileHeader > .coverImage > img')\n    const cover = getAttribute<string>(coverEl, 'src', '')\n\n    const aboutEl = $('section.aboutMeSection > div:nth-child(2)')\n    const about = aboutEl.text().trim()\n\n    const bioEl = $('.biographyText .content div[itemprop=\"description\"], .bio:not(:has(.aboutMeSection)) > .text')\n    const bio = stripeSpaceMapper(bioEl.text().trim())\n\n    const verifiedEl = $('.badge-username > .verifiedPornstar')\n    const verified = !!verifiedEl.length\n\n    const awardEl = $('.badge-username > .trophyPornStar')\n    const awarded = !!awardEl.length\n\n    const premiumEl = $('.badge-username > .premium-icon')\n    const premium = !!premiumEl.length\n\n    const subscribersEl = $('div.tooltipTrig.infoBox[data-title^=\"Subscribers:\"]')\n    const subscribersText = getDataAttribute<string>(subscribersEl, 'title', '')\n        .replace('Subscribers: ', '')\n    const subscribersText2 = $('div.infoBox:has(.title:contains(\"Subscribers\")) > span').text().trim()\n    const subscribers = parseReadableNumber(subscribersText) || parseReadableNumber(subscribersText2)\n\n    const featuredIn = $('div.featuredIn > a')\n        .toArray()\n        .map((el) => {\n            const item = $(el)\n            const name = item.text().trim()\n            const url = getAttribute<string>(item, 'href', '')\n            return { name, url }\n        })\n        .filter(item => item.name && item.url)\n\n    let uploadedVideoCount = 0\n    const taggedVideoCount = 0\n    if (verified) {\n        const recentVideoCountEl = $('.mostRecentPornstarVideos > .pornstarVideosCounter')\n        uploadedVideoCount = parseVideoCount(recentVideoCountEl.text().trim())\n\n        // looks like model page doesn't have tagged video count\n    }\n    else {\n        // there is no unverified model :D\n    }\n\n    const socials = {\n        website: getAttribute<string>($('a:has(.officialSiteIcon)'), 'href'),\n        twitter: getAttribute<string>($('a:has(.twitterIcon)'), 'href'),\n        instagram: getAttribute<string>($('a:has(.instagramIcon)'), 'href'),\n        snapchat: getAttribute<string>($('a:has(.snapchatIcon)'), 'href'),\n        modelhub: getAttribute<string>($('a:has(.modelhubIcon)'), 'href'),\n        amazonWishList: getAttribute<string>($('a:has(.amazonWishlistIcon)'), 'href')\n            || getAttribute<string>($('a:has(.amazonWLIcon)'), 'href'),\n    }\n\n    return {\n        name,\n        about,\n        bio,\n        avatar,\n        cover,\n        rank,\n        verified,\n        awarded,\n        premium,\n        subscribers,\n        featuredIn,\n        uploadedVideoCount,\n        taggedVideoCount,\n        ...info,\n        socials,\n    } as ModelPage\n}\n","import { Route } from '../../apis'\nimport { getCheerio } from '../../utils/cheerio'\nimport { UrlParser } from '../../utils/url'\nimport type { Engine } from '../../core/engine'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface PhotoPage {\n    info: {\n        title: string\n        views: number\n        rating: string\n        albumID: string\n        url: string\n    }\n    provider: {\n        id: number\n        username: string\n        url: string\n    }\n    tags: string[]\n}\n\nexport async function photoPage(engine: Engine, urlOrId: string): Promise<PhotoPage> {\n    const id = UrlParser.getPhotoID(urlOrId)\n    const url = Route.photoPage(id)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        info: parsePhoto($),\n        provider: parseProvider($),\n        tags: parseTag($),\n    }\n}\n\nfunction parsePhoto($: CheerioAPI) {\n    const photoWrapper = $('div#photoWrapper')\n    const $img = photoWrapper.find('img')\n    const title = $img.attr('alt') || ''\n    const url = $img.attr('src') || ''\n    const albumID = photoWrapper.data('album-id')?.toString() || ''\n    const rating = `${photoWrapper.find('span#votePercentageNumber').text()}%` || ''\n\n    const viewsText = photoWrapper.find('section#photoInfoSection strong').text()\n    const views = parseInt(removeComma(viewsText)) || 0\n\n    return {\n        title,\n        views,\n        rating,\n        albumID,\n        url,\n    }\n}\n\nfunction parseProvider($: CheerioAPI) {\n    const $user = $('div#userInformation div.usernameWrap')\n\n    const id = $user.data('userid') as number\n    const username = $user.find('a').text()\n    const url = $user.find('a').attr('href') || ''\n\n    return { id, username, url }\n}\n\nfunction parseTag($: CheerioAPI) {\n    const $list = $('ul.tagList a.tagText')\n    return $list.map(idx => $list.eq(idx).text()).get()\n}\n\nfunction removeComma(str: string) {\n    return str.replace(/,/g, '')\n}\n","import { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { parseReadableNumber } from '../../utils/number'\nimport { UrlParser } from '../../utils/url'\nimport type { Engine } from '../../core/engine'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface PornstarPage {\n    name: string\n    about: string\n    bio: string\n    avatar: string\n    cover: string\n    rank: number\n    verified: boolean\n    awarded: boolean\n    premium: boolean\n    subscribers: number\n    featuredIn: Array<{ name: string; url: string }>\n\n    uploadedVideoCount: number\n    taggedVideoCount: number\n\n    gender?: string\n    born?: string\n    birthPlace?: string\n    starSign?: string\n    measurements?: string\n    endowment?: string\n    relationship?: 'Open' | 'Taken' | 'Single' | (string & {})\n    interestedIn?: string\n    cityAndCountry?: string\n    pornstarProfileViews?: number\n    careerStatus?: string\n    careerStartAndEnd?: string\n    height?: string\n    weight?: string\n    ethnicity?: string\n    background?: string\n    hairColor?: string\n    eyeColor?: string\n    fakeBoobs?: string\n    tattoos?: string\n    piercings?: string\n    interests?: string\n    videoWatched?: number\n    turnOns?: string\n    turnOffs?: string\n    videoViews?: number\n    profileViews?: number\n\n    socials: {\n        website?: string\n        twitter?: string\n        instagram?: string\n        snapchat?: string\n        modelhub?: string\n        amazonWishList?: string\n    }\n}\n\nconst defaultMapper = (value: string) => value\nconst yesNoMapper = (value: string) => value === 'Yes'\nconst stripeSpaceMapper = (value: string) => value.split(/\\s+/).join(' ')\nconst numberMapper = (value: string) => parseReadableNumber(value)\nconst DefaultMapper = {\n    key: defaultMapper,\n    value: defaultMapper,\n}\nconst KeyMapper: Record<string, {\n    key: (key: string) => keyof PornstarPage\n    value: (value: string) => string | boolean | number\n}> = {\n    'Relationship status': {\n        key: () => 'relationship',\n        value: defaultMapper,\n    },\n    'Interested in': {\n        key: () => 'interestedIn',\n        value: defaultMapper,\n    },\n    'Gender': {\n        key: () => 'gender',\n        value: defaultMapper,\n    },\n    'Height': {\n        key: () => 'height',\n        value: defaultMapper,\n    },\n    'Weight': {\n        key: () => 'weight',\n        value: defaultMapper,\n    },\n    'Ethnicity': {\n        key: () => 'ethnicity',\n        value: defaultMapper,\n    },\n    'Background': {\n        key: () => 'background',\n        value: defaultMapper,\n    },\n    'Hair Color': {\n        key: () => 'hairColor',\n        value: defaultMapper,\n    },\n    'Eye Color': {\n        key: () => 'eyeColor',\n        value: defaultMapper,\n    },\n    'Fake Boobs': {\n        key: () => 'fakeBoobs',\n        value: yesNoMapper,\n    },\n    'Tattoos': {\n        key: () => 'tattoos',\n        value: yesNoMapper,\n    },\n    'Piercings': {\n        key: () => 'piercings',\n        value: yesNoMapper,\n    },\n    'Video Views': {\n        key: () => 'videoViews',\n        value: numberMapper,\n    },\n    'Profile Views': {\n        key: () => 'profileViews',\n        value: numberMapper,\n    },\n    'Pornstar Profile Views': {\n        key: () => 'pornstarProfileViews',\n        value: numberMapper,\n    },\n    'Videos Watched': {\n        key: () => 'videoWatched',\n        value: numberMapper,\n    },\n    'Turn Ons': {\n        key: () => 'turnOns',\n        value: defaultMapper,\n    },\n    'Turn Offs': {\n        key: () => 'turnOffs',\n        value: defaultMapper,\n    },\n    'Interests and hobbies': {\n        key: () => 'interests',\n        value: defaultMapper,\n    },\n    'Born': {\n        key: () => 'born',\n        value: defaultMapper,\n    },\n    'Birth Place': {\n        key: () => 'birthPlace',\n        value: defaultMapper,\n    },\n    'Birthplace': {\n        key: () => 'birthPlace',\n        value: defaultMapper,\n    },\n    'Star Sign': {\n        key: () => 'starSign',\n        value: defaultMapper,\n    },\n    'Measurements': {\n        key: () => 'measurements',\n        value: defaultMapper,\n    },\n    'City and Country': {\n        key: () => 'cityAndCountry',\n        value: defaultMapper,\n    },\n    'Endowment': {\n        key: () => 'endowment',\n        value: defaultMapper,\n    },\n    'Career Status': {\n        key: () => 'careerStatus',\n        value: defaultMapper,\n    },\n    'Career Start and End': {\n        key: () => 'careerStartAndEnd',\n        value: stripeSpaceMapper,\n    },\n}\n\nconst parseVideoCount = (text: string) => {\n    // \"Showing 1-XX of YY\"\n    if (!text) return 0\n\n    const match = text.match(/Showing \\d+-\\d+ of (\\d+)/)\n    if (match) return parseReadableNumber(match[1])\n\n    return 0\n}\n\nexport async function pornstarPage(engine: Engine, urlOrName: string): Promise<PornstarPage> {\n    const name = UrlParser.getPornstarName(urlOrName)\n    if (!name) throw new Error(`Invalid pornstar input: ${urlOrName}`)\n\n    const url = Route.pornstarPage(name)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return parseInfo($)\n}\n\nfunction parseInfo($: CheerioAPI): PornstarPage {\n    const infoPieces = $('div.infoPiece').toArray()\n    const info = Object.fromEntries(infoPieces.map((el) => {\n        const item = $(el)\n        const key = item.find('span:nth-child(1)').text().trim().replace(':', '')\n        const value = item.find('span:nth-child(2)').text().trim()\n            || item.text().replace(item.find('span:nth-child(1)').text(), '').trim()\n        const mapper = KeyMapper[key] || DefaultMapper\n        return [mapper.key(key), mapper.value(value)]\n    }))\n\n    const name = $('.nameSubscribe > .name').text().trim()\n\n    const rankEl = $('div.rankingInfo > .infoBox > span')\n    const rank = parseReadableNumber(rankEl.text().trim())\n\n    const avatarEl = $('img#getAvatar, .topProfileHeader > .thumbImage > img')\n    const avatar = getAttribute<string>(avatarEl, 'src', '')\n\n    const coverEl = $('img#coverPictureDefault, .topProfileHeader > .coverImage > img')\n    const cover = getAttribute<string>(coverEl, 'src', '')\n\n    const aboutEl = $('section.aboutMeSection > div:nth-child(2)')\n    const about = aboutEl.text().trim()\n\n    const bioEl = $('.biographyText .content div[itemprop=\"description\"], .bio:not(:has(.aboutMeSection)) > .text')\n    const bio = stripeSpaceMapper(bioEl.text().trim())\n\n    const verifiedEl = $('.badge-username > .verifiedPornstar')\n    const verified = !!verifiedEl.length\n\n    const awardEl = $('.badge-username > .trophyPornStar')\n    const awarded = !!awardEl.length\n\n    const premiumEl = $('.badge-username > .premium-icon')\n    const premium = !!premiumEl.length\n\n    const subscribersEl = $('div.tooltipTrig.infoBox[data-title^=\"Subscribers:\"]')\n    const subscribersText = getDataAttribute<string>(subscribersEl, 'title', '')\n        .replace('Subscribers: ', '')\n    const subscribersText2 = $('div.infoBox:has(.title:contains(\"Subscribers\")) > span').text().trim()\n    const subscribers = parseReadableNumber(subscribersText) || parseReadableNumber(subscribersText2)\n\n    const featuredIn = $('div.featuredIn > a')\n        .toArray()\n        .map((el) => {\n            const item = $(el)\n            const name = item.text().trim()\n            const url = getAttribute<string>(item, 'href', '')\n            return { name, url }\n        })\n        .filter(item => item.name && item.url)\n\n    let uploadedVideoCount = 0\n    let taggedVideoCount = 0\n    if (verified) {\n        const uploadedVideoCountEl = $('.pornstarUploadedVideos > .pornstarVideosCounter')\n        uploadedVideoCount = parseVideoCount(uploadedVideoCountEl.text().trim())\n\n        const taggedVideoCountEl = $('.mostRecentPornstarVideos > .pornstarVideosCounter')\n        taggedVideoCount = parseVideoCount(taggedVideoCountEl.text().trim())\n    }\n    else {\n        const videoCounter = $('.pornstarVideosCounter').first()\n        if (videoCounter.length) {\n            const title = videoCounter.parent().find('.sectionTitle > h2').first().text().trim()\n            if (title.endsWith('Tagged Videos')) {\n                taggedVideoCount = parseVideoCount(videoCounter.text().trim())\n            }\n\n            // non-verified pornstar are not allowed to upload videos\n            // uploadedVideoCount = 0\n        }\n    }\n\n    const socials = {\n        website: getAttribute<string>($('a:has(.officialSiteIcon)'), 'href'),\n        twitter: getAttribute<string>($('a:has(.twitterIcon)'), 'href'),\n        instagram: getAttribute<string>($('a:has(.instagramIcon)'), 'href'),\n        snapchat: getAttribute<string>($('a:has(.snapchatIcon)'), 'href'),\n        modelhub: getAttribute<string>($('a:has(.modelhubIcon)'), 'href'),\n        amazonWishList: getAttribute<string>($('a:has(.amazonWishlistIcon)'), 'href')\n            || getAttribute<string>($('a:has(.amazonWLIcon)'), 'href'),\n    }\n\n    return {\n        name,\n        about,\n        bio,\n        avatar,\n        cover,\n        rank,\n        verified,\n        awarded,\n        premium,\n        subscribers,\n        featuredIn,\n        uploadedVideoCount,\n        taggedVideoCount,\n        ...info,\n        socials,\n    } as PornstarPage\n}\n","export function toHHMMSS(sec: number) {\n    const hours = Math.floor(sec / 3600)\n    const minutes = Math.floor(sec / 60) % 60\n    const seconds = sec % 60\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? `0${v}` : v)\n        .filter((v, i) => v !== '00' || i > 0)\n        .join(':')\n}\n","import { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { parseReadableNumber } from '../../utils/number'\nimport { toHHMMSS } from '../../utils/time'\nimport { UrlParser } from '../../utils/url'\nimport type { Engine } from '../../core/engine'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface VideoPage {\n    id: string\n    title: string\n    views: number\n    vote: {\n        up: number\n        down: number\n        total: number\n        rating: number\n    }\n    premium: boolean\n    thumb: string\n    /**\n     * @deprecated We no longer support video download. Use alternative tools such as `yt-dlp` instead.\n     */\n    videos: Array<{\n        url: string\n        quality: string\n        filename: string\n        extension: string\n    }>\n    provider: {\n        username: string\n        url: string\n    } | null\n    /** video duration (in second) */\n    duration: number\n    /** video duration formatted in \"(HH:)mm:ss\". eg. \"32:09\", \"01:23:05\" */\n    durationFormatted: string\n    tags: string[]\n    pornstars: string[]\n    categories: string[]\n}\n\n// const parseFileName = (str: string) => /\\/([a-zA-Z0-9%=&_-]+\\.(mp4|flv))/.exec(str)\n\nexport async function videoPage(engine: Engine, urlOrId: string): Promise<VideoPage> {\n    const id = UrlParser.getVideoID(urlOrId)\n    const url = Route.videoPage(id)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        id,\n        ...parseByDom(html, $),\n    }\n}\n\nfunction parseByDom(html: string, $: CheerioAPI) {\n    const voteUp = parseReadableNumber($('span.votesUp').text() || '0')\n    const voteDown = parseReadableNumber($('span.votesDown').text() || '0')\n\n    const title = $('head > title').first().text().replace(' - Pornhub.com', '')\n    const viewsText = $('span.count').text() || '0'\n    const views = parseReadableNumber(viewsText)\n    const vote = {\n        up: voteUp,\n        down: voteDown,\n        total: voteUp + voteDown,\n        rating: Math.round(voteUp / (voteUp + voteDown) * 100) / 100,\n    }\n    const premium = $('.video-wrapper .ph-icon-badge-premium').length !== 0\n    const thumb = getAttribute<string>($('.thumbnail img'), 'src', '')\n\n    // wtf...is this double rel a coding bug from pornhub?\n    // <a rel=\"rel=\"nofollow\"\" href=\"/users/xxxx\"  class=\"bolded\">XXXXX</a>\n    const providerLink = $('.usernameBadgesWrapper a.bolded').first()\n    const provider = providerLink.length\n        ? { username: providerLink.text(), url: getAttribute<string>(providerLink, 'href', '') }\n        : null\n\n    const trafficJunkyMeta = $('head meta[name=adsbytrafficjunkycontext]')\n    const tags = getDataAttribute<string>(trafficJunkyMeta, 'context-tag')?.split(',') || []\n    const pornstars = getDataAttribute<string>(trafficJunkyMeta, 'context-pornstar')?.split(',') || []\n    const categories = getDataAttribute<string>(trafficJunkyMeta, 'context-category')?.split(',') || []\n\n    const durationMeta = $('head meta[property=\"video:duration\"]')\n    const duration = +getAttribute<number>(durationMeta, 'content', 0)\n    const durationFormatted = toHHMMSS(duration)\n\n    return {\n        title,\n        views,\n        vote,\n        premium,\n        thumb,\n        videos: [],\n        provider,\n        tags,\n        pornstars,\n        categories,\n        duration,\n        durationFormatted,\n    }\n}\n","import type { Counting, Paging } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport function parsePaging($: CheerioAPI): Paging {\n    const current = parseInt($('li.page_current').text())\n    const nextPage = $('li.page_next')\n    const maxPage = nextPage.length ? parseInt($('li.page_next').prev('li').text()) : current\n    return {\n        current,\n        maxPage,\n        isEnd: !nextPage.length,\n    }\n}\n\nexport function parseCounting($: CheerioAPI): Counting {\n    try {\n        const counterStr = $('.showingCounter').text()\n        const [, from = '0', to = '0', total = '0'] = /(\\d+)-(\\d+)\\sof\\s(\\d+)/.exec(counterStr) || []\n        return {\n            from: parseInt(from),\n            to: parseInt(to),\n            total: parseInt(total),\n        }\n    }\n    catch (err) {\n        return {\n            from: 0,\n            to: 0,\n            total: 0,\n        }\n    }\n}\n","import { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { parseCounting, parsePaging } from './base'\nimport type { Engine } from '../../core/engine'\nimport type { AlbumSearchOptions, Counting, Paging } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface AlbumSearchResult {\n    title: string\n    url: string\n    rating: string\n    preview: string\n}\n\nexport async function albumSearch(engine: Engine, keyword: string, options: AlbumSearchOptions): Promise<{\n    data: AlbumSearchResult[]\n    paging: Paging\n    counting: Counting\n}> {\n    const url = Route.albumSearch(keyword, options)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        data: parseResult($),\n        paging: parsePaging($),\n        counting: parseCounting($),\n    }\n}\n\nfunction parseResult($: CheerioAPI) {\n    const $list = $('ul#photosAlbumsSection li.photoAlbumListContainer div.photoAlbumListBlock')\n    const result = $list.map((_, el) => {\n        const item = $(el)\n\n        const title = getAttribute<string>(item, 'title', '')\n        const url = `${BASE_URL}${item.find('a').attr('href')}`\n        const rating = item.find('.album-photo-percentage').text()\n        const preview = getDataAttribute<string>(item, 'bkg')\n        || getAttribute<string>(item, 'style', '').match(/url\\(\"(.+)\"\\)/)?.[1]\n        || ''\n        return { title, url, rating, preview }\n    }).get()\n\n    return result\n}\n","import urlcat from 'urlcat'\nimport { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { removeProtectionBracket } from '../../utils/utils'\nimport { parseCounting, parsePaging } from './base'\nimport type { Engine } from '../../core/engine'\nimport type { Counting, GifSearchOptions, Paging } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface GifSearchResult {\n    title: string\n    url: string\n    mp4: string\n    webm: string\n}\n\nexport async function gifSearch(engine: Engine, keyword: string, options: GifSearchOptions): Promise<{\n    data: GifSearchResult[]\n    paging: Paging\n    counting: Counting\n}> {\n    const url = Route.gifSearch(keyword, options)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        data: parseResult($),\n        paging: parsePaging($),\n        counting: parseCounting($),\n    }\n}\n\nfunction parseResult($: CheerioAPI) {\n    const list = $('ul.gifLink li.gifVideoBlock')\n    const result = list.map((_, el) => {\n        const item = $(el)\n\n        const video = item.find('video')\n        const poster = getAttribute<string>(video, 'poster', '')\n        const path = getAttribute<string>(item.find('a'), 'href', '')\n\n        return {\n            title: item.find('.title').text(),\n            url: urlcat(BASE_URL, path),\n            mp4: getDataAttribute<string>(video, 'mp4', ''),\n            webm: getDataAttribute<string>(video, 'webm', ''),\n            preview: removeProtectionBracket(poster),\n        }\n    }).get()\n\n    return result\n}\n","export function unescape(str: string) {\n    if (typeof str !== 'string') return null\n\n    return str.replace(/\\\\/g, '')\n        .replace(/%2C/g, ',')\n        .replace(/%5B/g, '[')\n        .replace(/%5D/g, ']')\n        .replace(/&amp;/g, '&')\n}\n\n// https://ci.phncdn.com/pics/pornstars/000/002/190/(m=lciuhScOb_c)(mh=y8jot66fDRXSMiYW)thumb_00000.jpg\n// => https://ci.phncdn.com/pics/pornstars/000/002/190/thumb_00000.jpg\nexport const removeProtectionBracket = (str: string) => str.replace(/\\(.+?\\)/g, '')\n","import { getAutoComplete } from '../../apis/autoComplete'\nimport type { Engine } from '../../core/engine'\nimport type { AutoCompleteOptions } from '../../types'\nimport type { AutoCompleteResultItem } from '../../types/AutoComplete'\n\nexport async function modelSearch(engine: Engine, keyword: string, options: AutoCompleteOptions = {}): Promise<Array<AutoCompleteResultItem<number>>> {\n    const result = await getAutoComplete(engine, keyword, options)\n    return result.models\n}\n","import urlcat from 'urlcat'\nimport { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { parseCounting, parsePaging } from './base'\nimport type { Engine } from '../../core/engine'\nimport type { Counting, Paging, PornstarSearchOptions } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface PornstarSearchResult {\n    name: string\n    url: string\n    views: string\n    videoNum: number\n    rank: number\n    photo: string\n}\n\nexport async function pornstarSearch(engine: Engine, keyword: string, options: PornstarSearchOptions): Promise<{\n    data: PornstarSearchResult[]\n    paging: Paging\n    counting: Counting\n}> {\n    const url = Route.pornstarSearch(keyword, options)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        data: parseResult($),\n        paging: parsePaging($),\n        counting: parseCounting($),\n    }\n}\n\nfunction parseResult($: CheerioAPI) {\n    const $list = $('ul#pornstarsSearchResult li div.wrap')\n    const result = $list.map((_, el) => {\n        const item = $(el)\n        const path = getAttribute<string>(item.find('a'), 'href', '')\n        const img = item.find('img')\n\n        return {\n            name: item.find('.title').text(),\n            url: urlcat(BASE_URL, path),\n            views: item.find('.pstarViews').text().replace('views', '').trim() || '0',\n            videoNum: parseInt(item.find('.videosNumber').text()) || 0,\n            rank: parseInt(item.find('.rank_number').text()) || 0,\n            photo: getDataAttribute<string>(img, 'thumb_url', ''),\n        }\n    }).get()\n\n    return result\n}\n","import urlcat from 'urlcat'\nimport { Route } from '../../apis'\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { parsePaging } from './base'\nimport type { Engine } from '../../core/engine'\nimport type { Paging, PornstarListOptions } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface PornstarListResult {\n    name: string\n    url: string\n    views: string\n    videoNum: number\n    rank: number\n    photo: string\n    verified: boolean\n    awarded: boolean\n}\n\nexport async function pornstarList(engine: Engine, options: PornstarListOptions): Promise<{\n    data: PornstarListResult[]\n    paging: Paging\n}> {\n    const url = Route.pornstarList(options)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        data: parseResult($),\n        paging: parsePaging($),\n    }\n}\n\nfunction parseResult($: CheerioAPI) {\n    const list = $('#popularPornstars li.performerCard')\n    const result = list.map((_, el) => {\n        const item = $(el)\n\n        const name = item.find('.performerCardName').text().trim()\n        const path = getAttribute<string>(item.find('a.title'), 'href', '')\n        const url = urlcat(BASE_URL, path)\n        const views = item.find('.viewsNumber').text().replace('Views', '').trim() || '0'\n        const videoNum = parseInt(item.find('.videosNumber').text().replace('Videos', '')) || 0\n        const rank = parseInt(item.find('.rank_number').text()) || 0\n        const img = item.find('img')\n        const photo = getDataAttribute<string>(img, 'thumb_url', '')\n        const verified = item.find('.verifiedPornstar').length > 0\n        const awarded = item.find('.trophyPornStar').length > 0\n\n        return {\n            name,\n            url,\n            views,\n            videoNum,\n            rank,\n            photo,\n            verified,\n            awarded,\n        }\n    }).get()\n\n    return result\n}\n","import urlcat from 'urlcat'\nimport { Route } from '../../apis'\nimport { getAttribute, getCheerio } from '../../utils/cheerio'\nimport { BASE_URL } from '../../utils/constant'\nimport { parseCounting, parsePaging } from './base'\nimport type { Engine } from '../../core/engine'\nimport type { Counting, Paging, VideoSearchOptions } from '../../types'\nimport type { CheerioAPI } from 'cheerio'\n\nexport interface VideoSearchResult {\n    title: string\n    url: string\n    views: string\n    duration: string\n    /** @deprecated This is no longer valid in pornhub's new version. We don't have a way to tell */\n    hd: boolean\n    /** @deprecated This is no longer valid in pornhub's new version, use `freePremium` instead */\n    premium: boolean\n    freePremium: boolean\n    preview: string\n}\n\nexport async function videoSearch(engine: Engine, keyword: string, options: VideoSearchOptions): Promise<{\n    data: VideoSearchResult[]\n    paging: Paging\n    counting: Counting\n}> {\n    const url = Route.videoSearch(keyword, options)\n    const html = await engine.request.raw(url)\n    const $ = getCheerio(html)\n\n    return {\n        data: parseResult($),\n        paging: parsePaging($),\n        counting: parseCounting($),\n    }\n}\n\nfunction parseResult($: CheerioAPI) {\n    const list = $('#videoSearchResult li.videoBox')\n\n    const result = list.map((_, el) => {\n        const item = $(el)\n        const thumb = item.find('.linkVideoThumb').eq(0)\n        const title = getAttribute<string>(thumb, 'title', '')\n        const path = getAttribute<string>(thumb, 'href', '')\n        const img = item.find('img')\n        const preview = getAttribute<string>(img, 'src', '')\n\n        return {\n            title,\n            url: urlcat(BASE_URL, path),\n            views: item.find('.videoDetailsBlock .views var').text(),\n            duration: item.find('.duration').text(),\n            hd: !!item.find('.hd-thumbnail').length,\n            premium: !!item.find('.premiumIcon').length,\n            freePremium: !!item.find('.marker-overlays .phpFreeBlock').length,\n            preview,\n        }\n    }).get()\n\n    return result\n}\n","import { Route, getMainPage, login, logout } from './apis'\nimport { getAutoComplete } from './apis/autoComplete'\nimport { getToken } from './apis/getToken'\nimport { Engine } from './core/engine'\nimport { WebMaster } from './core/webmaster'\nimport { albumPage } from './scrapers/pages/album'\nimport { modelPage } from './scrapers/pages/model'\nimport { photoPage } from './scrapers/pages/photo'\nimport { pornstarPage } from './scrapers/pages/pornstar'\nimport { videoPage } from './scrapers/pages/video'\nimport { albumSearch } from './scrapers/search/album'\nimport { gifSearch } from './scrapers/search/gif'\nimport { modelSearch } from './scrapers/search/model'\nimport { pornstarSearch } from './scrapers/search/pornstar'\nimport { pornstarList } from './scrapers/search/pornstars'\nimport { videoSearch } from './scrapers/search/video'\nimport type { AlbumSearchOptions, AutoCompleteOptions, GifSearchOptions, PornstarListOptions, PornstarSearchOptions, VideoSearchOptions } from './types'\nimport type { RequestInit } from 'node-fetch'\n\nexport * from './types'\nexport * from './utils/error'\nexport type { AlbumPage } from './scrapers/pages/album'\nexport type { PhotoPage } from './scrapers/pages/photo'\nexport type { VideoPage } from './scrapers/pages/video'\nexport type { PornstarPage } from './scrapers/pages/pornstar'\nexport type { ModelPage } from './scrapers/pages/model'\n\nexport type { AlbumSearchResult } from './scrapers/search/album'\nexport type { PornstarSearchResult } from './scrapers/search/pornstar'\nexport type { GifSearchResult } from './scrapers/search/gif'\nexport type { VideoSearchResult } from './scrapers/search/video'\n\nexport type { WebmasterCategory } from './apis/webmaster/categories'\nexport type { WebmasterDeleted } from './apis/webmaster/deleted'\nexport type { WebmasterEmbed } from './apis/webmaster/embed'\nexport type { WebmasterSearch } from './apis/webmaster/search'\nexport type { WebmasterStarsDetailed } from './apis/webmaster/stars_detailed'\nexport type { WebmasterStars, WebmasterStar } from './apis/webmaster/stars'\nexport type { WebmasterTags } from './apis/webmaster/tags'\nexport type { WebmasterVideoById } from './apis/webmaster/video_by_id'\nexport type { WebmasterVideoIsActive } from './apis/webmaster/video_is_active'\n\nexport class PornHub {\n    engine = new Engine()\n    route = Route\n    webMaster = new WebMaster(this.engine)\n\n    setAgent(agent: RequestInit['agent']) {\n        this.engine.request.setAgent(agent)\n    }\n\n    setHeader(key: string, value: string) {\n        this.engine.request.setHeader(key, value)\n    }\n\n    setCookie(key: string, value: any) {\n        this.engine.request.setCookie(key, value)\n    }\n\n    /**\n     * See: https://github.com/pionxzh/Pornhub.js/issues/27\n     * @deprecated This method is no longer needed.\n     */\n    async warmup() {\n        console.warn('`warmup` has been deprecated. You can safely remove this method call. It has been handled internally.')\n        // no-op\n    }\n\n    /**\n     * Login with account and password.\n    */\n    login(account: string, password: string) {\n        return login(this.engine, account, password)\n    }\n\n    /**\n     * Logout from Pornhub.com.\n    */\n    logout() {\n        return logout(this.engine)\n    }\n\n    /**\n     * Get token from Pornhub.com.\n     * Most of pornhub's api need this token.\n     * You can cache this token to avoid frequent requests (I'm not sure about the expiration time!).\n     *\n     * For now, this token is only used for `autoComplete` and `searchModel`.\n     * This library will automatically get token if you don't provide it.\n     */\n    getToken() {\n        return getToken(this.engine)\n    }\n\n    /**\n     * Get video information by url/ID\n     * @param urlOrId Video ID or page url\n    */\n    async video(urlOrId: string) {\n        if (!this.engine.warmedUp) {\n            // make a call to the main page to get the cookies.\n            // PornHub will redirect you to a corn video if you don't have a proper cookie set.\n            // See issue: [#27 Video been redirected to a corn video](https://github.com/pionxzh/Pornhub.js/issues/27)\\\n            await getMainPage(this.engine)\n            this.engine.warmedUp = true\n        }\n        return videoPage(this.engine, urlOrId)\n    }\n\n    /**\n     * Get album information by url/ID\n     * @param urlOrId Album ID or page url\n    */\n    album(urlOrId: string) {\n        return albumPage(this.engine, urlOrId)\n    }\n\n    /**\n     * Get photo information by url/ID\n     * @param urlOrId Photo ID or page url\n    */\n    photo(urlOrId: string) {\n        return photoPage(this.engine, urlOrId)\n    }\n\n    /**\n     * Get pornstar information by url/ID\n     * @param urlOrName Pornstar name or page url\n    */\n    pornstar(urlOrName: string) {\n        return pornstarPage(this.engine, urlOrName)\n    }\n\n    /**\n     * Get model information by url/ID\n     * @param urlOrName Model name or page url\n     */\n    model(urlOrName: string) {\n        return modelPage(this.engine, urlOrName)\n    }\n\n    /**\n     * Get autocomplete result by keyword.\n     */\n    autoComplete(keyword: string, options: AutoCompleteOptions = {}) {\n        return getAutoComplete(this.engine, keyword, options)\n    }\n\n    /**\n     * Search album by keyword.\n     */\n    searchAlbum(keyword: string, options: AlbumSearchOptions = {}) {\n        return albumSearch(this.engine, keyword, options)\n    }\n\n    /**\n     * Search gif by keyword.\n     */\n    searchGif(keyword: string, options: GifSearchOptions = {}) {\n        return gifSearch(this.engine, keyword, options)\n    }\n\n    /**\n     * Search pornstar by keyword.\n     */\n    searchPornstar(keyword: string, options: PornstarSearchOptions = {}) {\n        return pornstarSearch(this.engine, keyword, options)\n    }\n\n    /**\n     * Search model by keyword.\n     */\n    searchModel(keyword: string, options: AutoCompleteOptions = {}) {\n        return modelSearch(this.engine, keyword, options)\n    }\n\n    /**\n     * Search video by keyword.\n     */\n    searchVideo(keyword: string, options: VideoSearchOptions = {}) {\n        return videoSearch(this.engine, keyword, options)\n    }\n\n    /**\n     * Get pornstar list.\n     */\n    pornstarList(options: PornstarListOptions = {}) {\n        return pornstarList(this.engine, options)\n    }\n}\n"],"mappings":"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","names":["getToken","getToken","tags","categories","name","parseProvider","parseTag","defaultMapper","yesNoMapper","stripeSpaceMapper","numberMapper","DefaultMapper","KeyMapper","parseVideoCount","parseInfo","name","tags","categories","urlcat","parseResult","urlcat","urlcat","parseResult","urlcat","urlcat","parseResult","urlcat","urlcat","parseResult","urlcat","getToken"]}